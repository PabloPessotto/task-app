// Mocks generated by Mockito 5.4.4 from annotations
// in taskforme/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:taskforme/core/result.dart' as _i5;
import 'package:taskforme/data/datasource/local/user/user_local_data_source.dart'
    as _i9;
import 'package:taskforme/data/datasource/remote/user/user_remote_data_source.dart'
    as _i8;
import 'package:taskforme/data/model/user/content/content_user_dto.dart' as _i2;
import 'package:taskforme/data/network/service_client/user/user_service_client.dart'
    as _i12;
import 'package:taskforme/domain/entities/user.dart' as _i6;
import 'package:taskforme/domain/repository/user_repository.dart' as _i3;
import 'package:taskforme/domain/usecase/user/get_username_usecase.dart'
    as _i11;
import 'package:taskforme/domain/usecase/user/login_usecase.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContentUserDto_0 extends _i1.SmartFake
    implements _i2.ContentUserDto {
  _FakeContentUserDto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Result<_i6.User, String>> register(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            username,
            password,
          ],
        ),
        returnValue: _i4.Future<_i5.Result<_i6.User, String>>.value(
            _i7.dummyValue<_i5.Result<_i6.User, String>>(
          this,
          Invocation.method(
            #register,
            [
              username,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i5.Result<_i6.User, String>>);

  @override
  _i4.Future<_i5.Result<_i6.User, String>> login(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            username,
            password,
          ],
        ),
        returnValue: _i4.Future<_i5.Result<_i6.User, String>>.value(
            _i7.dummyValue<_i5.Result<_i6.User, String>>(
          this,
          Invocation.method(
            #login,
            [
              username,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i5.Result<_i6.User, String>>);

  @override
  String getUsername() => (super.noSuchMethod(
        Invocation.method(
          #getUsername,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getUsername,
            [],
          ),
        ),
      ) as String);

  @override
  _i4.Future<bool> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i8.UserRemoteDataSource {
  MockUserRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ContentUserDto> register(
    String? name,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            name,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.ContentUserDto>.value(_FakeContentUserDto_0(
          this,
          Invocation.method(
            #register,
            [
              name,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ContentUserDto>);

  @override
  _i4.Future<_i2.ContentUserDto> login(
    String? name,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            name,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.ContentUserDto>.value(_FakeContentUserDto_0(
          this,
          Invocation.method(
            #login,
            [
              name,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ContentUserDto>);
}

/// A class which mocks [UserLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocalDataSource extends _i1.Mock
    implements _i9.UserLocalDataSource {
  MockUserLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> setUserName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #setUserName,
          [name],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setUserId(int? id) => (super.noSuchMethod(
        Invocation.method(
          #setUserId,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setToken,
          [token],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteToken,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  String getUserName() => (super.noSuchMethod(
        Invocation.method(
          #getUserName,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getUserName,
            [],
          ),
        ),
      ) as String);

  @override
  int getUserId() => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  String getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getToken,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i10.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Result<_i6.User, String>> execute(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            username,
            password,
          ],
        ),
        returnValue: _i4.Future<_i5.Result<_i6.User, String>>.value(
            _i7.dummyValue<_i5.Result<_i6.User, String>>(
          this,
          Invocation.method(
            #execute,
            [
              username,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i5.Result<_i6.User, String>>);
}

/// A class which mocks [GetUsernameUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUsernameUseCase extends _i1.Mock
    implements _i11.GetUsernameUseCase {
  MockGetUsernameUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [UserServiceClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserServiceClient extends _i1.Mock implements _i12.UserServiceClient {
  MockUserServiceClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ContentUserDto> register(
    String? name,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            name,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.ContentUserDto>.value(_FakeContentUserDto_0(
          this,
          Invocation.method(
            #register,
            [
              name,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ContentUserDto>);

  @override
  _i4.Future<_i2.ContentUserDto> login(
    String? name,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            name,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.ContentUserDto>.value(_FakeContentUserDto_0(
          this,
          Invocation.method(
            #login,
            [
              name,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ContentUserDto>);
}
